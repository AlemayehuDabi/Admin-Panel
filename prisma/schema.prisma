// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  WORKER
  COMPANY
  OWNER
  BROKER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  REJECTED
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum JobStatus {
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_REWARD
  ADJUSTMENT
}

// prisma/schema.prisma  (additions only)

model User {
  id           String             @id @default(uuid())
  fullName     String
  email        String             @unique
  phone        String?            @unique
  passwordHash String
  location     String?
  role         UserRole
  status       UserStatus         @default(PENDING)
  verification VerificationStatus @default(PENDING)
  referralCode String?            @unique
  referredBy   String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tokenVersion Int      @default(0) // <— NEW

  workerProfile  Worker?
  companyProfile Company?
  wallet         Wallet?
  Review         Review[]

  @@index([referredBy]) // <— NEW
}

model Worker {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  categoryId       String?
  category         Category? @relation(fields: [categoryId], references: [id])
  professionalRole String?
  profilePhoto     String?
  skills           String[]
  workType         String[]
  experience       String?
  nationalIdUrl    String?
  licenses         License[]
  portfolio        String[] // file urls
  availability     Json?

  // relations
  reviews      Review[]
  specialities WorkerSpeciality[]
  workTypes    WorkerWorkType[]
  badges       String[]
  applications WorkerJobApplication[]
  Role         Role?                  @relation(fields: [roleId], references: [id])
  roleId       String?
}

model License {
  id          String    @id @default(uuid())
  worker      Worker    @relation(fields: [workerId], references: [id])
  workerId    String
  name        String?
  issuedAt    DateTime
  expiresAt   DateTime?
  documentUrl String
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // e.g. 1–5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  Worker    Worker? @relation(fields: [workerId], references: [id])
  workerId  String?

  @@unique([userId, companyId]) // one company can review a user only once
}

model Company {
  id                    String   @id @default(uuid())
  user                  User     @relation(fields: [userId], references: [id])
  userId                String   @unique
  companyLogo           String?
  businessLocation      String?
  verificationDocuments String[] // file urls
  jobs                  Job[]
  Review                Review[]
}

model Job {
  id                String    @id @default(uuid())
  title             String
  description       String
  requiredSkills    String[]
  jobLocation       String?
  payRate           Float
  jobType           String?
  startDate         DateTime?
  duration          DateTime?
  numbersNeedWorker Int       @default(1)
  additionalInfo    String?
  status            JobStatus @default(ACTIVE)
  company           Company   @relation(fields: [companyId], references: [id])
  companyId         String

  //
  applications WorkerJobApplication[]
  createdAt    DateTime               @default(now())
}

model WorkerJobApplication {
  id        String   @id @default(uuid())
  worker    Worker   @relation(fields: [workerId], references: [id])
  workerId  String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  status    String   @default("PENDING") // Pending, Accepted, Rejected
  appliedAt DateTime @default(now())
}

model Wallet {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  balance      Float         @default(0.0)
  currency     String        @default("ETB")
  transactions Transaction[]
}

model Transaction {
  id        String          @id @default(uuid())
  wallet    Wallet          @relation(fields: [walletId], references: [id])
  walletId  String
  type      TransactionType
  amount    Float
  createdAt DateTime        @default(now())
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  roles  Role[]
  Worker Worker[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  worker       Worker[]
  specialities Speciality[]
}

model Speciality {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  roleId      String
  role        Role    @relation(fields: [roleId], references: [id])

  workTypes WorkType[]
  workers   WorkerSpeciality[]
}

model WorkType {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  specialityId String
  speciality   Speciality @relation(fields: [specialityId], references: [id])

  workers WorkerWorkType[]
}

model WorkerSpeciality {
  workerId     String
  specialityId String

  worker     Worker     @relation(fields: [workerId], references: [id])
  speciality Speciality @relation(fields: [specialityId], references: [id])

  @@id([workerId, specialityId]) // composite primary key
}

model WorkerWorkType {
  workerId   String
  workTypeId String

  worker   Worker   @relation(fields: [workerId], references: [id])
  workType WorkType @relation(fields: [workTypeId], references: [id])

  @@id([workerId, workTypeId])
}
